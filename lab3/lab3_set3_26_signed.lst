     1                                  ;(a*a+b/c-1)/(b+c)+d-x; a-word; b-byte; c-word; d-doubleword; x-qword
     2                                  bits 32
     3                                  
     4                                  global start
     5                                  
     6                                  extern exit
     7                                  
     8                                  import exit msvcrt.dll
     9                                  
    10                                  segment data use32 class=data
    11 00000000 9CFF                        a dw -100
    12 00000002 14                          b db 20
    13 00000003 FBFF                        c dw -5
    14 00000005 32000000                    d dd 50
    15 00000009 C800000000000000            x dq 200
    16                                      ;(-100 * 100 + 20 / (-5) - 1) / (20 - 5) + 50 - 200
    17                                  segment code use32 class=code
    18                                  start:    
    19 00000000 66A1[00000000]              mov AX, [a]
    20 00000006 66F72D[00000000]            imul word [a] ;DX:AX = a * a
    21 0000000D 6652                        push DX
    22 0000000F 6650                        push AX
    23 00000011 58                          pop EAX
    24 00000012 89C3                        mov EBX, EAX ;EBX = a * a
    25                                      
    26 00000014 A0[02000000]                mov AL, [b]
    27 00000019 6698                        cbw
    28 0000001B 6699                        cwd
    29 0000001D 66F73D[03000000]            idiv word [c] ;AX = b / c
    30 00000024 98                          cwde ;EAX = b / c
    31                                      
    32 00000025 01C3                        add EBX, EAX ;EBX = a * a + b / c
    33 00000027 83EB01                      sub EBX, 1 ;EBX = a * a + b / c - 1
    34                                      
    35 0000002A A0[02000000]                mov AL, [b]
    36 0000002F 6698                        cbw ;AX = b
    37 00000031 660305[03000000]            add AX, [c] ;AX = b + c
    38 00000038 6689C1                      mov CX, AX ;CX = b + c
    39                                      
    40 0000003B 53                          push EBX
    41 0000003C 6658                        pop AX
    42 0000003E 665A                        pop DX
    43                                      
    44 00000040 66F7F9                      idiv word CX ;AX = (a * a + b / c - 1) / (b + c)
    45 00000043 98                          cwde ;EAX = (a * a + b / c - 1) / (b + c)
    46                                      
    47 00000044 0305[05000000]              add EAX, [d] ;EAX = (a * a + b / c - 1) / (b + c) + d
    48 0000004A 99                          cdq ;EDX:EAX = (a * a + b / c - 1) / (b + c) + d
    49                                      
    50 0000004B 8B1D[09000000]              mov EBX, [x]
    51 00000051 8B0D[0B000000]              mov ECX, [x + 2] ;ECX:EBX = x 
    52                                      
    53 00000057 29D8                        sub EAX, EBX
    54 00000059 19D1                        sbb ECX, EDX ;EDX:EAX = (a * a + b / c - 1) / (b + c) + d - x
    55                                  
    56 0000005B 6A00                        push dword 0
    57 0000005D FF15[00000000]              call [exit]
