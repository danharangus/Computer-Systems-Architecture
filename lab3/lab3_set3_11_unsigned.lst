     1                                  ;(a+b)/(2-b*b+b/c)-x; a-doubleword; b,c-byte; x-qword UNSIGNED
     2                                  bits 32
     3                                  
     4                                  global start
     5                                  
     6                                  extern exit
     7                                  
     8                                  import exit msvcrt.dll
     9                                  
    10                                  segment data use32 class=data
    11 00000000 90010000                    a dd 400
    12 00000004 00                          b db 0
    13 00000005 05                          c db 5
    14 00000006 9600000000000000            x dq 150
    15                                      ;(400 + 0) / (2 - 0*0 + 0/5) - 150 = 50 
    16                                  segment code use32 class=code
    17                                  start:    
    18 00000000 668B1D[00000000]            mov BX, [a]
    19 00000007 668B0D[02000000]            mov CX, [a + 2] ;CX:BX = a
    20                                      
    21 0000000E A0[04000000]                mov AL, [b]
    22 00000013 B400                        mov AH, 0
    23 00000015 66BA0000                    mov DX, 0 ;DX:AX = b
    24 00000019 6601C3                      add BX, AX
    25 0000001C 6611D1                      adc CX, DX ;CX:BX = a + b
    26                                      
    27 0000001F A0[04000000]                mov AL, [b]
    28 00000024 F625[04000000]              mul byte [b] ;AX = b * b
    29 0000002A 66BA0200                    mov DX, 2
    30 0000002E 6629C2                      sub DX, AX ;DX = 2 - b * b
    31                                      
    32 00000031 A0[04000000]                mov AL, [b]
    33 00000036 B400                        mov AH, 0
    34 00000038 F635[05000000]              div byte [c] ;AL = b / c
    35 0000003E B400                        mov AH, 0
    36 00000040 6601C2                      add DX, AX ;DX = 2 - b * b + b / c
    37                                      
    38 00000043 6689D8                      mov AX, BX
    39 00000046 6689D3                      mov BX, DX
    40 00000049 6689CA                      mov DX, CX ;DX:AX = (a + b), BX = 2 - b * b + b / c
    41 0000004C 66F7F3                      div word BX ;AX = (a + b) / 2 - b * b + b / c
    42 0000004F 66BA0000                    mov DX, 0
    43 00000053 6652                        push DX
    44 00000055 6650                        push AX
    45 00000057 58                          pop EAX ;EAX = (a + b) / 2 - b * b + b / c
    46 00000058 BA00000000                  mov EDX, 0 ;EDX:EAX = (a + b) / 2 - b * b + b / c
    47                                      
    48 0000005D 8B1D[06000000]              mov EBX, [x]
    49 00000063 8B0D[0A000000]              mov ECX, [x + 4]
    50                                      
    51 00000069 29D8                        sub EAX, EBX
    52 0000006B 19CA                        sbb EDX, ECX ;EDX:EAX = 2 - b * b + b / c - x
    53                                      
    54                                  
    55 0000006D 6A00                        push dword 0
    56 0000006F FF15[00000000]              call [exit]
