     1                                  ;(a*a+b/c-1)/(b+c)+d-x; a-word; b-byte; c-word; d-doubleword; x-qword
     2                                  bits 32
     3                                  
     4                                  global start
     5                                  
     6                                  extern exit
     7                                  
     8                                  import exit msvcrt.dll
     9                                  
    10                                  segment data use32 class=data
    11 00000000 6400                        a dw 100
    12 00000002 14                          b db 20
    13 00000003 0500                        c dw 5
    14 00000005 32000000                    d dd 50
    15 00000009 C800000000000000            x dq 200
    16                                      
    17                                  segment code use32 class=code
    18                                  start:    
    19 00000000 66A1[00000000]              mov AX, [a]
    20 00000006 66F725[00000000]            mul word [a] ;DX:AX = a * a
    21 0000000D 6652                        push DX
    22 0000000F 6650                        push AX
    23 00000011 58                          pop EAX
    24 00000012 89C3                        mov EBX, EAX ;EBX = a * a
    25                                      
    26 00000014 A0[02000000]                mov AL, [b]
    27 00000019 B400                        mov AH, 0
    28 0000001B 66BA0000                    mov DX, 0
    29 0000001F 66F735[03000000]            div word [c] ;AX = b / c
    30 00000026 66BA0000                    mov DX, 0
    31 0000002A 6652                        push DX
    32 0000002C 6650                        push AX
    33 0000002E 58                          pop EAX ;EAX = b / c
    34                                      
    35 0000002F 01C3                        add EBX, EAX ;EBX = a * a + b / c
    36 00000031 83EB01                      sub EBX, 1 ;EBX = a * a + b / c - 1
    37                                      
    38 00000034 A0[02000000]                mov AL, [b]
    39 00000039 B400                        mov AH, 0 ;AX = b
    40 0000003B 660305[03000000]            add AX, [c] ;AX = b + c
    41 00000042 6689C1                      mov CX, AX ;CX = b + c
    42                                      
    43 00000045 53                          push EBX
    44 00000046 6658                        pop AX
    45 00000048 665A                        pop DX
    46                                      
    47 0000004A 66F7F1                      div word CX ;AX = (a * a + b / c - 1) / (b + c)
    48 0000004D 66BA0000                    mov DX, 0
    49 00000051 6652                        push DX
    50 00000053 6650                        push AX
    51 00000055 58                          pop EAX ;EAX = (a * a + b / c - 1) / (b + c)
    52                                      
    53 00000056 0305[05000000]              add EAX, [d] ;EAX = (a * a + b / c - 1) / (b + c) + d
    54 0000005C BA00000000                  mov EDX, 0 ;EDX:EAX = (a * a + b / c - 1) / (b + c) + d
    55                                      
    56 00000061 8B1D[09000000]              mov EBX, [x]
    57 00000067 8B0D[0B000000]              mov ECX, [x + 2] ;ECX:EBX = x 
    58                                      
    59 0000006D 29D8                        sub EAX, EBX
    60 0000006F 19D1                        sbb ECX, EDX ;EDX:EAX = (a * a + b / c - 1) / (b + c) + d - x
    61                                  
    62 00000071 6A00                        push dword 0
    63 00000073 FF15[00000000]              call [exit]
