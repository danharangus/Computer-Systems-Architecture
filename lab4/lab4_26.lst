     1                                  ;Given 2 dublucuvinte R and T. Compute the doubleword Q as follows:
     2                                  ;the bits 0-6 of Q are the same as the bits 10-16 of T
     3                                  ;the bits 7-24 of Q are the same as the bits 7-24 of (R XOR T).
     4                                  ;the bits 25-31 of Q are the same as the bits 5-11 of R.
     5                                  bits 32
     6                                  
     7                                  global start
     8                                  
     9                                  extern exit
    10                                  
    11                                  import exit msvcrt.dll
    12                                  
    13                                  segment data use32 class=data
    14 00000000 D7CBBE9B                     r dd 1001_1011_1011_1110_1100_1011_1101_0111b
    15 00000004 BE9645DD                     t dd 1101_1101_0100_0101_1001_0110_1011_1110b
    16                                   ;r xor t 0100_0110_1111_1011_0101_1101_0110_1001b
    17                                    ;result 1011_1100_1111_1011_0101_1101_0110_0101b
    18                                       
    19                                  segment code use32 class=code
    20                                  start:    
    21 00000000 BB00000000                  mov EBX, 0 ;result will be computed in EBX
    22                                      
    23 00000005 A1[04000000]                mov EAX, [t]
    24 0000000A 2500FC0100                  and EAX, 0000_0000_0000_0001_1111_1100_0000_0000b ;we isolate bits 10-16 of T
    25 0000000F B10A                        mov CL, 10
    26 00000011 D3C8                        ror EAX, CL ;we rotate by 10 positions to the right
    27 00000013 09C3                        or EBX, EAX ;we put the bits in the result
    28                                      
    29 00000015 A1[00000000]                mov EAX, [r]
    30 0000001A 3305[04000000]              xor EAX, [t] ;EAX = R XOR T
    31 00000020 2580FFFF01                  and EAX, 0000_0001_1111_1111_1111_1111_1000_0000b ;we isolate bits 7-24 of (R XOR T)
    32 00000025 09C3                        or EBX, EAX ;we put the bits in the result
    33                                      
    34 00000027 A1[00000000]                mov EAX, [r]
    35 0000002C 25E00F0000                  and EAX, 0000_0000_0000_0000_0000_1111_1110_0000b ;we isolate bits 5-11 of R
    36 00000031 B114                        mov CL, 20
    37 00000033 D3C0                        rol EAX, CL ;we rotate by 20 positions to the left
    38 00000035 09C3                        or EBX, EAX ;we put the bits in the result
    39                                      
    40                                  
    41 00000037 6A00                        push dword 0
    42 00000039 FF15[00000000]              call [exit]
